{"version":3,"sources":["components/Tile/styles.ts","components/Tile/index.tsx","components/Grid/styles.ts","components/Grid/index.tsx","components/index.ts","reportWebVitals.ts","styles.tsx","App.tsx","index.tsx","components/utils.ts"],"names":["StyledTile","styled","span","isRevealed","type","gameStatus","TileLabel","Tile","line","column","value","handleReveal","React","useState","isFlagged","setIsFlagged","useEffect","getTileType","role","onClick","onContextMenu","e","preventDefault","StyledGrid","div","columns","GameContainer","lines","EndGameCard","EndGameEmoji","RestartButton","button","Grid","mines","setGameStatus","minefield","setMinefield","revealedTiles","setRevealedTiles","handleRevealTile","useCallback","tileCode","getTileCode","newRevealedTiles","toBeRevealed","length","next","pop","getTilesAround","forEach","pos","code","l","c","push","revealed","field","buildMineField","Object","keys","currentStatus","Array","map","_","i","Math","floor","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","styles","css","PageWrapper","App","ReactDOM","render","StrictMode","document","getElementById","n","minesLeft","random","countMinesAround","reduce","sum","tiles"],"mappings":"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","file":"static/js/main.707732a7.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nimport { GameStatus, TileType } from '../types'\n\nexport const StyledTile = styled.span<{\n  isRevealed: boolean\n  gameStatus: GameStatus\n  type: TileType\n}>`\n  cursor: pointer;\n  user-select: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 26px;\n  height: 26px;\n  background: ${({ isRevealed, type, gameStatus }) =>\n    !isRevealed || type === 'number'\n      ? '#77C063'\n      : type === 'empty'\n      ? '#8F6F4F'\n      : gameStatus === 'lost'\n      ? 'tomato'\n      : '#77C063'};\n  border: 2px solid\n    ${({ isRevealed, type, gameStatus }) =>\n      !isRevealed || type === 'number'\n        ? '#569358'\n        : type === 'empty'\n        ? '#6C4D36'\n        : gameStatus === 'lost'\n        ? 'tomato'\n        : '#569358'};\n\n  box-shadow: ${({ isRevealed, type }) =>\n    isRevealed && type === 'empty'\n      ? 'inset 2px 2px 8px #4f372e'\n      : '0px 3px 15px rgba(0, 0, 0, 0.4), inset 0px 1px 0px rgba(255, 255, 255, 0.3), inset 0px 0px 3px rgba(255, 255, 255, 0.5)'};\n\n  transition: all 500ms ease-in-out;\n`\n\nexport const TileLabel = styled.span<{ isRevealed: boolean }>`\n  color: #345835;\n  font-weight: 700;\n  font-size: 18px;\n  visibility: ${({ isRevealed }) => (isRevealed ? 'visible' : 'hidden')};\n  opacity: ${({ isRevealed }) => (isRevealed ? 1 : 0)};\n`\n","import React from 'react'\n\nimport { StyledTile, TileLabel } from './styles'\nimport { getTileType } from '../utils'\nimport { GameStatus } from '../types'\n\nexport interface TileProps {\n  line: number\n  column: number\n  value: number\n  handleReveal: (line: number, column: number) => void\n  isRevealed: boolean\n  gameStatus: GameStatus\n}\n\nexport const Tile: React.FC<TileProps> = ({\n  line,\n  column,\n  value,\n  handleReveal,\n  isRevealed,\n  gameStatus,\n}) => {\n  const [isFlagged, setIsFlagged] = React.useState(false)\n\n  React.useEffect(() => {\n    if (isRevealed) {\n      setIsFlagged(false)\n    }\n  }, [isRevealed])\n\n  const type = getTileType(value)\n\n  return (\n    <StyledTile\n      role=\"button\"\n      type={type}\n      isRevealed={isRevealed}\n      gameStatus={gameStatus}\n      onClick={() => !isFlagged && handleReveal(line, column)}\n      onContextMenu={e => {\n        e.preventDefault()\n        setIsFlagged(!isFlagged)\n      }}\n    >\n      <TileLabel isRevealed={isRevealed || isFlagged}>\n        {!isRevealed && isFlagged ? '🚩' : type === 'bomb' ? '💣' : type === 'number' ? value : ''}\n      </TileLabel>\n    </StyledTile>\n  )\n}\n","import styled from '@emotion/styled'\n\nimport { GameStatus } from '../types'\n\nexport const StyledGrid = styled.div<{ columns: number }>`\n  display: grid;\n  width: calc(${({ columns }) => columns} * 30px);\n  grid-template-columns: repeat(${({ columns }) => columns}, 1fr);\n  border: 0;\n  box-shadow: inset 0 1px 1px 0 hsl(0deg 0% 100% / 15%), 0 50px 100px -20px rgb(50 50 93 / 30%),\n    0 30px 60px -30px rgb(0 0 0 / 50%), -10px 10px 60px -10px rgb(103 178 111 / 30%);\n`\n\nexport const GameContainer = styled.div<{ lines: number; columns: number }>`\n  position: relative;\n  width: calc(${({ columns }) => columns} * 30px);\n  height: calc(${({ lines }) => lines} * 30px);\n\n  &:hover .endgame-card {\n    opacity: 1;\n  }\n`\n\nexport const EndGameCard = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: rgba(255, 255, 255, 0.9);\n  border-radius: 10px;\n  padding: 20px;\n  width: 180px;\n  height: 180px;\n  left: calc(50% - (180px / 2));\n  top: calc(50% - (180px / 2));\n  transform: perspective(750px) translate3d(0px, 0px, -250px) rotateX(27deg) scale(0.9, 0.9);\n  border: 5px solid #e6e6e6;\n  box-shadow: 0 70px 40px -20px rgba(0, 0, 0, 0.2);\n  transition: 0.4s ease-in-out transform, 0.3s ease-in-out opacity;\n\n  opacity: 0;\n\n  &:hover {\n    transform: translate3d(0px, 0px, -250px);\n\n    & button {\n      opacity: 1;\n      transform: translate3d(0px, 0px, 0px);\n    }\n  }\n`\n\nexport const EndGameEmoji = styled.span`\n  font-size: 80px;\n  margin-bottom: 10px;\n`\n\nexport const RestartButton = styled.button<{ gameStatus: GameStatus }>`\n  cursor: pointer;\n  padding: 6px 12px;\n  border: 0;\n  color: #fff;\n  background-color: ${({ gameStatus }) => (gameStatus === 'lost' ? 'tomato' : '#77c063')};\n  border-radius: 4px;\n\n  opacity: 0;\n  transform: translate3d(0px, 50px, 0px);\n\n  transition: 0.4s ease-in-out transform, 0.2s ease-in-out opacity;\n`\n","import React from 'react'\n\nimport { Tile } from '../Tile'\nimport { GameStatus } from '../types'\nimport { buildMineField, getTileCode, getTilesAround } from '../utils'\nimport { EndGameCard, EndGameEmoji, GameContainer, RestartButton, StyledGrid } from './styles'\n\nexport interface GridProps {\n  lines: number\n  columns: number\n  mines: number\n}\n\nexport const Grid: React.FC<GridProps> = ({ lines, columns, mines }) => {\n  const [gameStatus, setGameStatus] = React.useState<GameStatus>('in_progress')\n  const [minefield, setMinefield] = React.useState<Record<string, number>>({})\n  const [revealedTiles, setRevealedTiles] = React.useState<Record<string, boolean>>({})\n\n  const handleRevealTile = React.useCallback(\n    (line: number, column: number) => {\n      const tileCode = getTileCode(line, column)\n      const newRevealedTiles: Record<string, boolean> = {}\n      const toBeRevealed = [{ line, column }]\n\n      if (minefield[tileCode] === -1) {\n        setGameStatus('lost')\n      }\n\n      while (toBeRevealed.length > 0) {\n        const next = toBeRevealed.pop()\n\n        if (next) {\n          const tileCode = getTileCode(next.line, next.column)\n\n          newRevealedTiles[tileCode] = true\n\n          if (minefield[tileCode] > 0) {\n            continue\n          }\n\n          getTilesAround(next.line, next.column, lines, columns).forEach(pos => {\n            const code = getTileCode(pos.l, pos.c)\n\n            if (!revealedTiles[code] && !newRevealedTiles[code]) {\n              toBeRevealed.push({ line: pos.l, column: pos.c })\n            }\n          })\n        }\n      }\n\n      setRevealedTiles(revealed => ({ ...revealed, ...newRevealedTiles }))\n    },\n    [lines, columns, minefield, revealedTiles],\n  )\n\n  React.useEffect(() => {\n    if (gameStatus === 'in_progress') {\n      const field = buildMineField(lines, columns, mines)\n      setMinefield(field)\n      setRevealedTiles({})\n    }\n  }, [lines, columns, mines, gameStatus])\n\n  React.useEffect(() => {\n    if (Object.keys(revealedTiles).length + mines === lines * columns) {\n      setGameStatus(currentStatus => (currentStatus === 'in_progress' ? 'won' : currentStatus))\n    }\n  }, [revealedTiles, setGameStatus, lines, columns, mines])\n\n  return (\n    <GameContainer lines={lines} columns={columns}>\n      <StyledGrid columns={columns}>\n        {[...new Array(lines * columns)].map((_, i) => {\n          const line = Math.floor(i / lines)\n          const column = i % columns\n          const tileCode = getTileCode(line, column)\n\n          return (\n            <Tile\n              key={tileCode}\n              line={line}\n              column={column}\n              value={minefield[tileCode]}\n              gameStatus={gameStatus}\n              handleReveal={handleRevealTile}\n              isRevealed={revealedTiles[tileCode] || gameStatus !== 'in_progress'}\n            />\n          )\n        })}\n      </StyledGrid>\n      {gameStatus !== 'in_progress' && (\n        <EndGameCard className=\"endgame-card\">\n          <EndGameEmoji>{gameStatus === 'lost' ? '☠️' : '😎'}</EndGameEmoji>\n          <RestartButton gameStatus={gameStatus} onClick={() => setGameStatus('in_progress')}>\n            Restart\n          </RestartButton>\n        </EndGameCard>\n      )}\n    </GameContainer>\n  )\n}\n","export * from './Tile'\nexport * from './Grid'\nexport * from './types'\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport { css, Global } from '@emotion/react'\nimport styled from '@emotion/styled'\n\nexport const GlobalStyles: React.FC = () => (\n  <Global\n    styles={css`\n      html,\n      body,\n      #root {\n        height: 100%;\n        margin: 0;\n      }\n    `}\n  />\n)\n\nexport const PageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: #f7faff;\n`\n","import React from 'react'\n\nimport { Grid } from './components'\nimport { PageWrapper } from './styles'\n\nexport const App: React.FC = () => {\n  return (\n    <PageWrapper>\n      <Grid lines={10} columns={10} mines={5} />\n    </PageWrapper>\n  )\n}\n\n// easy: 10, 10: 5\n// normal: 10, 10, 10\n// hard: 12, 12, 30\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport reportWebVitals from './reportWebVitals'\nimport { App } from './App'\nimport { GlobalStyles } from './styles'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { TileType } from './types'\n\nexport const getTileType = (value: number): TileType =>\n  value === -1 ? 'bomb' : value > 0 ? 'number' : 'empty'\n\nexport const getTileCode = (line: number, column: number): string => `${line}-${column}`\n\nexport const probability = (n: number): boolean => !!n && Math.random() <= n\n\nexport const buildMineField = (\n  lines: number,\n  columns: number,\n  mines: number,\n): Record<string, number> => {\n  const field: Record<string, number> = {}\n  let minesLeft = mines\n\n  for (let l = 0; l < lines; l++) {\n    for (let c = 0; c < columns; c++) {\n      const tileCode = getTileCode(l, c)\n\n      field[tileCode] = 0\n\n      if (minesLeft > 0 && probability(0.15)) {\n        field[tileCode] = -1\n        minesLeft -= 1\n      }\n    }\n  }\n\n  for (let l = 0; l < lines; l++) {\n    for (let c = 0; c < columns; c++) {\n      const tileCode = getTileCode(l, c)\n\n      if (field[tileCode] === -1) {\n        continue\n      }\n\n      field[tileCode] = countMinesAround(l, c, lines, columns, field)\n    }\n  }\n\n  return field\n}\n\nexport const countMinesAround = (\n  line: number,\n  column: number,\n  lines: number,\n  columns: number,\n  field: Record<string, number>,\n): number =>\n  getTilesAround(line, column, lines, columns).reduce(\n    (sum, pos) => (field[getTileCode(pos.l, pos.c)] === -1 ? sum + 1 : sum),\n    0,\n  )\n\nexport const getTilesAround = (\n  line: number,\n  column: number,\n  lines: number,\n  columns: number,\n): { l: number; c: number }[] => {\n  const tiles = []\n\n  for (let l = line - 1; l <= line + 1; l++) {\n    for (let c = column - 1; c <= column + 1; c++) {\n      if (l < 0 || l >= lines || c < 0 || c >= columns) {\n        continue\n      }\n\n      tiles.push({ l, c })\n    }\n  }\n\n  return tiles\n}\n"],"sourceRoot":""}